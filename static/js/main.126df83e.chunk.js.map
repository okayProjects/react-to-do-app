{"version":3,"sources":["components/AddTask/AddTask.js","components/Task/Task.js","components/Sort/Sort.js","components/TaskList/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","inputHandler","e","type","target","value","setState","prevState","addNewTaskHandler","_this$state","props","addTask","maxDate","this","react_default","a","createElement","className","placeholder","onChange","min","max","onClick","Component","Task","_props$task","task","id","active","important","expiry","style","color","backgroundColor","change","delete","expiryTime","toLocaleString","Sort","options","sortOptions","map","option","key","name","selected","method","arguments","length","undefined","selectName","select","TaskList","toDoTasks","activeTasks","components_Task_Task","done","doneTasks","showAllTasks","components_Sort_Sort","displayTasks","splice","App","counter","deleteTaskHandler","Object","toConsumableArray","filter","changeTaskHandler","Array","from","forEach","getTime","push","addTaskHandler","concat","textContent","selectHandler","sort","b","toLowerCase","tasks","components_AddTask_AddTask","components_TaskList_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8UAuEeA,0NAlEXC,SAAU,IAAIC,MAAOC,cAAcC,MAAM,EAAG,MAE5CC,MAAQ,CACJC,KAAM,GACNC,SAAS,EACTC,KAAMC,EAAKR,WAGfS,aAAe,SAACC,GACZ,IAAMC,EAAOD,EAAEE,OAAOD,KAChBN,EAAOK,EAAEE,OAAOC,MAChBP,EAAUI,EAAEE,OAAON,QACnBC,EAAOG,EAAEE,OAAOC,MAET,SAATF,EACAH,EAAKM,SAAS,SAAAC,GACV,MAAO,CAAER,KAAMQ,EAAUR,KAAOA,KAEpB,SAATI,EACPH,EAAKM,SAAS,SAAAC,GACV,MAAO,CAAEV,KAAMU,EAAUV,KAAOA,KAEpB,aAATM,GACPH,EAAKM,SAAS,SAAAC,GACV,MAAO,CAAET,QAASS,EAAUT,QAAUA,QAKlDU,kBAAoB,WAAM,IAAAC,EACUT,EAAKJ,MAA7BC,EADcY,EACdZ,KAAME,EADQU,EACRV,KAAMD,EADEW,EACFX,QAERE,EAAKU,MAAMC,QAAQd,EAAME,EAAMD,IAEvCE,EAAKM,SAAS,SAAAC,GACV,MAAO,CACHT,QAASS,EAAUT,SAAU,EAC7BD,KAAMU,EAAUV,KAAO,GACvBE,KAAMQ,EAAUR,KAAOC,EAAKR,oFAQxC,IAAMoB,GAAWC,KAAKrB,QAAQG,MAAM,EAAG,GAAK,EAAI,SAEhD,OACImB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SAAOb,KAAK,OAAOE,MAAOQ,KAAKjB,MAAMC,KAAMqB,YAAY,gBAAgBC,SAAUN,KAAKZ,eACtFa,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,SAAOb,KAAK,WAAWL,QAASe,KAAKjB,MAAME,QAASqB,SAAUN,KAAKZ,eADvE,YAIAa,EAAAC,EAAAC,cAAA,kCACIF,EAAAC,EAAAC,cAAA,SAAOb,KAAK,OAAOE,MAAOQ,KAAKjB,MAAMG,KAAMqB,IAAKP,KAAKrB,QAAS6B,IAAKT,EAASO,SAAUN,KAAKZ,gBAE/Fa,EAAAC,EAAAC,cAAA,UAAQM,QAAST,KAAKL,mBAAtB,qBA7DEe,cCqCPC,SArCF,SAACd,GAAU,IAAAe,EAEkCf,EAAMgB,KAApD7B,EAFY4B,EAEZ5B,KAAME,EAFM0B,EAEN1B,KAAM4B,EAFAF,EAEAE,GAAIC,EAFJH,EAEIG,OAAQC,EAFZJ,EAEYI,UAAWC,EAFvBL,EAEuBK,OAM3C,GAAIF,EACA,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMe,MAAOF,EATf,CACVG,MAAO,OACPC,gBAAiB,UAO4B,MAAOpC,GACxCiB,EAAAC,EAAAC,cAAA,yBAAiBjB,EAAjB,MAEJe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMZ,EAAMwB,OAAOP,KAApC,QACAb,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMZ,EAAMyB,OAAOR,KAApC,YAMZ,IAAMS,EAAa,IAAI3C,KAAKqC,GAAQO,iBACpC,OACIvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YAAOnB,GACPiB,EAAAC,EAAAC,cAAA,iCAAyBjB,GACzBe,EAAAC,EAAAC,cAAA,uBAAeoB,IAEnBtB,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMZ,EAAMyB,OAAOR,KAApC,aCfDW,eAhBF,SAAC5B,GAEV,IAAM6B,EAAU7B,EAAM8B,YAAYC,IAAI,SAAAC,GAAM,OACxC5B,EAAAC,EAAAC,cAAA,UAAQ2B,IAAKD,EAAOE,KAAMC,SAAUH,EAAOG,SAAUxC,MAAOqC,EAAOI,QAASJ,EAAOE,QAGvF,OACI9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,UAAQG,SAAU,SAACjB,GAAD,IAAI0C,EAAJG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAWrC,EAAMwC,WAAjB,OAAgCxC,EAAMyC,OAAOjD,EAAEE,OAAOC,MAAOuC,KAC1EL,MCuEFa,EA9EE,SAAC1C,GAEd,IAkCM2C,EAAY3C,EAAM4C,YAAYb,IAAI,SAAAf,GAAI,OACxCZ,EAAAC,EAAAC,cAACuC,EAAD,CAAMZ,IAAKjB,EAAKC,GACZD,KAAMA,EACNS,OAAQzB,EAAMyB,OACdD,OAAQxB,EAAMwB,WAGhBsB,EAAO9C,EAAM+C,UAAUhB,IAAI,SAAAf,GAAI,OACjCZ,EAAAC,EAAAC,cAACuC,EAAD,CAAMZ,IAAKjB,EAAKC,GACZD,KAAMA,EACNS,OAAQzB,EAAMyB,OACdD,OAAQxB,EAAMwB,OACdwB,aAAchD,EAAMgD,iBAG5B,OACI5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,sBAAcN,EAAM4C,YAAYN,OAAhC,mBACCtC,EAAM4C,YAAYN,OAAS,GAAKlC,EAAAC,EAAAC,cAAC2C,EAAD,CAAMT,WAAW,OAAOC,OAAQzC,EAAMyC,OAAQX,YAvDhE,CAC3B,CACII,KAAM,yBACNE,OAAQ,SAEZ,CACIF,KAAM,yBACNE,OAAQ,SAEZ,CACIF,KAAM,WACNE,OAAQ,gBA8CHpC,EAAM4C,YAAYN,OAAS,EAAIK,EAAYvC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAhB,sDAGhDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,0CAAkCN,EAAM+C,UAAUT,OAAlD,UACCtC,EAAM+C,UAAUT,OAAS,GAAKlC,EAAAC,EAAAC,cAAC2C,EAAD,CAAMT,WAAW,OAAOC,OAAQzC,EAAMyC,OAAQX,YAlDhE,CACzB,CACII,KAAM,kBACNE,OAAQ,cAGZ,CACIF,KAAM,kBACNE,OAAQ,cAEZ,CACIF,KAAM,yBACNE,OAAQ,SAEZ,CACIF,KAAM,yBACNE,OAAQ,aAoCHpC,EAAM+C,UAAUT,OAAS,GAAKlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAC1CH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,6CACAH,EAAAC,EAAAC,cAAA,UAAQM,QAASZ,EAAMgD,cAAvB,mBAEHhD,EAAMkD,aAAeJ,EAAOA,EAAKK,OAAO,EAAG,MCmH7CC,6MA1LbC,QAAU,IAEVnE,MAAQ,CACN0D,YAAa,GACbG,UAAW,GACXC,cAAc,KAGhBM,kBAAoB,SAACrC,GAQnB,IAAI2B,EAAWW,OAAAC,EAAA,EAAAD,CAAOjE,EAAKJ,MAAM0D,aACjCA,EAAcA,EAAYa,OAAO,SAAAzC,GAAI,OAAIA,EAAKC,KAAOA,IACrD3B,EAAKM,SAAS,CAAEgD,gBAChB,IAAIG,EAASQ,OAAAC,EAAA,EAAAD,CAAOjE,EAAKJ,MAAM6D,WAC/BA,EAAYA,EAAUU,OAAO,SAAAzC,GAAI,OAAIA,EAAKC,KAAOA,IACjD3B,EAAKM,SAAS,CAAEmD,iBAGlBW,kBAAoB,SAACzC,GACnB,IAAI8B,EAASQ,OAAAC,EAAA,EAAAD,CAAOjE,EAAKJ,MAAM6D,WAC3BH,EAAce,MAAMC,KAAKtE,EAAKJ,MAAM0D,aACxCA,EAAYiB,QAAQ,SAAA7C,GACdA,EAAKC,KAAOA,IACdD,EAAKE,QAAS,EACdF,EAAKI,QAAS,IAAIrC,MAAO+E,UACzBf,EAAUgB,KAAK/C,MAGnB4B,EAAcA,EAAYa,OAAO,SAAAzC,GAAI,OAAIA,EAAKE,SAC9C5B,EAAKM,SAAS,CAAEgD,cAAaG,iBAG/BiB,eAAiB,SAAC7E,EAAME,EAAM8B,GAC5B,IAAMH,EAAO,CACXC,GAAI3B,EAAK+D,UACTlE,OACAE,OACA8B,YACAD,QAAQ,EACRE,OAAQ,MAMV,OAHA9B,EAAKM,SAAS,SAAAC,GACZ,MAAO,CAAE+C,YAAW,GAAAqB,OAAAV,OAAAC,EAAA,EAAAD,CAAM1D,EAAU+C,aAAhB,CAA6B5B,QAE5C,KAGTgC,aAAe,SAACxD,GACVF,EAAKJ,MAAM8D,aACbxD,EAAEE,OAAOwE,YAAc,iBAEvB1E,EAAEE,OAAOwE,YAAc,wBAGzB5E,EAAKM,SAAS,SAAAC,GACZ,MAAO,CAAEmD,aAAcnD,EAAUmD,cAAgBnD,EAAUmD,mBAI/DmB,cAAgB,SAACxE,EAAOuC,GACtB,GAAa,SAATA,EAAiB,CACnB,IAAIU,EAAWW,OAAAC,EAAA,EAAAD,CAAOjE,EAAKJ,MAAM0D,aAEjC,OAAQjD,GACN,IAAK,QACHiD,EAAYwB,KAAK,SAAC/D,EAAGgE,GAInB,OAHAhE,EAAIA,EAAElB,KAAKmF,gBACXD,EAAIA,EAAElF,KAAKmF,gBAEQ,EACfjE,EAAIgE,EAAU,EACX,IAET,MACF,IAAK,QACHzB,EAAYwB,KAAK,SAAC/D,EAAGgE,GAInB,OAHAhE,EAAIA,EAAElB,KAAKmF,gBACXD,EAAIA,EAAElF,KAAKmF,gBAEQ,EACfjE,EAAIgE,EAAU,EACX,IAET,MACF,IAAK,aACHzB,EAAYwB,KAAK,SAAC/D,EAAGgE,GACnB,OAAIhE,EAAEe,OAASiD,EAAEjD,QAAgB,EAC7Bf,EAAEe,OAASiD,EAAEjD,OAAe,EACzB,IAET,MACF,IAAK,aACHwB,EAAYwB,KAAK,SAAC/D,EAAGgE,GACnB,OAAIhE,EAAEe,OAASiD,EAAEjD,QAAgB,EAC7Bf,EAAEe,OAASiD,EAAEjD,OAAe,EACzB,IAET,MACF,IAAK,WACHwB,EAAYwB,KAAK,SAAC/D,EAAGgE,GACnB,OAAIhE,EAAEc,YAAckD,EAAElD,WAAmB,GACpCd,EAAEc,WAAakD,EAAElD,UAAkB,EACjC,IAET,MAEF,QAASyB,EAActD,EAAKJ,MAAM0D,YAEpCtD,EAAKM,SAAS,SAAAC,GACZ,MAAO,CAAE+C,YAAa/C,EAAU+C,YAAcA,KAGhD,GAAa,SAATV,EAAiB,CACrB,IAAIa,EAASQ,OAAAC,EAAA,EAAAD,CAAOjE,EAAKJ,MAAM6D,WAE/B,OAAQpD,GACN,IAAK,QACHoD,EAAUqB,KAAK,SAAC/D,EAAGgE,GAIjB,OAHAhE,EAAIA,EAAElB,KAAKmF,gBACXD,EAAIA,EAAElF,KAAKmF,gBAEQ,EACfjE,EAAIgE,EAAU,EACX,IAET,MACF,IAAK,QACHtB,EAAUqB,KAAK,SAAC/D,EAAGgE,GAIjB,OAHAhE,EAAIA,EAAElB,KAAKmF,gBACXD,EAAIA,EAAElF,KAAKmF,gBAEQ,EACfjE,EAAIgE,EAAU,EACX,IAET,MACF,IAAK,aACHtB,EAAUqB,KAAK,SAAC/D,EAAGgE,GACjB,OAAIhE,EAAEe,OAASiD,EAAEjD,QAAgB,EAC7Bf,EAAEe,OAASiD,EAAEjD,OAAe,EACzB,IAET,MACF,IAAK,aACH2B,EAAUqB,KAAK,SAAC/D,EAAGgE,GACjB,OAAIhE,EAAEe,OAASiD,EAAEjD,QAAgB,EAC7Bf,EAAEe,OAASiD,EAAEjD,OAAe,EACzB,IAET,MAEF,QAAS2B,EAAYzD,EAAKJ,MAAM6D,UAGlCzD,EAAKM,SAAS,SAAAC,GACZ,MAAO,CAAEkD,UAAWlD,EAAU0E,MAAQxB,+EAO1C,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkE,EAAD,CAASvE,QAASE,KAAK6D,iBACvB5D,EAAAC,EAAAC,cAACmE,EAAD,CACE7B,YAAazC,KAAKjB,MAAM0D,YACxBG,UAAW5C,KAAKjB,MAAM6D,UACtBG,aAAc/C,KAAKjB,MAAM8D,aACzBvB,OAAQtB,KAAKmD,kBACb9B,OAAQrB,KAAKuD,kBACbV,aAAc7C,KAAK6C,aACnBP,OAAQtC,KAAKgE,wBArLLtD,aCOE6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.126df83e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css';\r\n\r\nclass AddTask extends Component {\r\n\r\n    minDate = new Date().toISOString().slice(0, 10);\r\n\r\n    state = {\r\n        text: '',\r\n        checked: false,\r\n        date: this.minDate\r\n    }\r\n\r\n    inputHandler = (e) => {\r\n        const type = e.target.type;\r\n        const text = e.target.value;\r\n        const checked = e.target.checked;\r\n        const date = e.target.value;\r\n\r\n        if (type === 'date') {\r\n            this.setState(prevState => {\r\n                return { date: prevState.date = date };\r\n            });\r\n        } else if (type === 'text') {\r\n            this.setState(prevState => {\r\n                return { text: prevState.text = text };\r\n            });\r\n        } else if (type === 'checkbox') {\r\n            this.setState(prevState => {\r\n                return { checked: prevState.checked = checked };\r\n            });\r\n        }\r\n    }\r\n\r\n    addNewTaskHandler = () => {\r\n        const { text, date, checked } = this.state;\r\n\r\n        const add = this.props.addTask(text, date, checked);\r\n        if (add) {\r\n            this.setState(prevState => {\r\n                return {\r\n                    checked: prevState.checked = false,\r\n                    text: prevState.text = '',\r\n                    date: prevState.date = this.minDate\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const maxDate = +this.minDate.slice(0, 4) + 1 + '-12-31';\r\n\r\n        return (\r\n            <div className='AddTask'>\r\n                <div className='Form'>\r\n                    <input type='text' value={this.state.text} placeholder='Add your task' onChange={this.inputHandler} />\r\n                    <label>\r\n                        <input type='checkbox' checked={this.state.checked} onChange={this.inputHandler} />\r\n                        Priority\r\n                    </label>\r\n                    <label>Must be done until\r\n                        <input type='date' value={this.state.date} min={this.minDate} max={maxDate} onChange={this.inputHandler} />\r\n                    </label>\r\n                    <button onClick={this.addNewTaskHandler}>Add task</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\nimport './Task.css';\r\n\r\nconst Task = (props) => {\r\n\r\n    const { text, date, id, active, important, expiry } = props.task;\r\n    const style = {\r\n        color: '#fff',\r\n        backgroundColor: 'orange'\r\n    }\r\n\r\n    if (active) {\r\n        return (\r\n            <div className='ActiveTask'>\r\n                <div>\r\n                    <span style={important ? style : null}>{text}</span>\r\n                    <span>deadline: {date} </span>\r\n                </div>\r\n                <div className='ActiveTaskButtonsWrapper'>\r\n                    <button onClick={() => props.change(id)}>DONE</button>\r\n                    <button onClick={() => props.delete(id)}>DELETE</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n\r\n        const expiryTime = new Date(expiry).toLocaleString()\r\n        return (\r\n            <div className='DoneTask'>\r\n                <div>\r\n                    <span>{text}</span>\r\n                    <span>inisial deadline: {date}</span>\r\n                    <em>Confirmed {expiryTime}</em>\r\n                </div>\r\n                <button onClick={() => props.delete(id)}>DELETE</button>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport './Sort.css';\r\n\r\nconst Sort = (props) => {\r\n\r\n    const options = props.sortOptions.map(option => (\r\n        <option key={option.name} selected={option.selected} value={option.method}>{option.name}</option>\r\n    ));\r\n\r\n    return (\r\n        <div className='Sort'>\r\n            <label>Sort by</label>\r\n            <select onChange={(e, name = props.selectName) => props.select(e.target.value, name)}>\r\n                {options}\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sort;","import React from 'react';\r\nimport Task from '../Task/Task';\r\nimport './TaskList.css';\r\nimport Sort from '../Sort/Sort';\r\n\r\n\r\nconst TaskList = (props) => {\r\n\r\n    const sortOptionsActiveTasks = [\r\n        {\r\n            name: 'Task names from A to Z',\r\n            method: 'fromA',\r\n        },\r\n        {\r\n            name: 'Task names from Z to A',\r\n            method: 'fromZ'\r\n        },\r\n        {\r\n            name: 'Priority',\r\n            method: 'priority'\r\n        },\r\n    ];\r\n    const sortOptionsDoneTasks = [\r\n        {\r\n            name: 'From the oldest',\r\n            method: 'fromOldest',\r\n\r\n        },\r\n        {\r\n            name: 'From the latest',\r\n            method: 'fromLatest'\r\n        },\r\n        {\r\n            name: 'Task names from A to Z',\r\n            method: 'fromA',\r\n        },\r\n        {\r\n            name: 'Task names from Z to A',\r\n            method: 'fromZ'\r\n        }\r\n    ];\r\n\r\n    const toDoTasks = props.activeTasks.map(task => (\r\n        <Task key={task.id}\r\n            task={task}\r\n            delete={props.delete}\r\n            change={props.change} />\r\n    ));\r\n\r\n    const done = props.doneTasks.map(task => (\r\n        <Task key={task.id}\r\n            task={task}\r\n            delete={props.delete}\r\n            change={props.change}\r\n            showAllTasks={props.showAllTasks} />\r\n    ));\r\n\r\n    return (\r\n        <div className='TaskList'>\r\n            <div className='ToDo'>\r\n                <div className='ToDoHeading'>\r\n                    <h1>Things to be done</h1>\r\n                    <h3>You have {props.activeTasks.length} things to do. </h3>\r\n                    {props.activeTasks.length > 1 && <Sort selectName='ToDo' select={props.select} sortOptions={sortOptionsActiveTasks} />}\r\n                </div>\r\n                {props.activeTasks.length > 0 ? toDoTasks : <span className='Encouragement'>You've got nothing to do. Start adding new tasks!</span>}\r\n            </div>\r\n\r\n            <div className='Done'>\r\n                <div className='DoneHeading'>\r\n                    <h1>Tasks already done</h1>\r\n                    <h3>You've managed to accomplish {props.doneTasks.length} tasks</h3>\r\n                    {props.doneTasks.length > 1 && <Sort selectName='Done' select={props.select} sortOptions={sortOptionsDoneTasks} />}\r\n                </div>\r\n                {props.doneTasks.length > 3 && <div className='WarningWrapper'>\r\n                    <span className='Warning'>only last three tasks are being displayed</span>\r\n                    <button onClick={props.showAllTasks}>Show all tasks</button>\r\n                </div>}\r\n                {props.displayTasks ? done : done.splice(0, 3)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\nimport './App.css';\nimport AddTask from './components/AddTask/AddTask';\nimport TaskList from './components/TaskList/TaskList';\n\nclass App extends Component {\n\n  counter = 0;\n\n  state = {\n    activeTasks: [],\n    doneTasks: [],\n    showAllTasks: false,\n  }\n\n  deleteTaskHandler = (id) => {\n    // const tasks = [...this.state.tasks];\n    // const index = tasks.findIndex(task => task.id === id);\n    // tasks.splice(index, 1);\n    // this.setState(prevState => {\n    //   return { tasks: prevState.tasks = tasks };\n    // });\n\n    let activeTasks = [...this.state.activeTasks];\n    activeTasks = activeTasks.filter(task => task.id !== id);\n    this.setState({ activeTasks })\n    let doneTasks = [...this.state.doneTasks];\n    doneTasks = doneTasks.filter(task => task.id !== id);\n    this.setState({ doneTasks })\n  }\n\n  changeTaskHandler = (id) => {\n    let doneTasks = [...this.state.doneTasks];\n    let activeTasks = Array.from(this.state.activeTasks);\n    activeTasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.expiry = new Date().getTime();\n        doneTasks.push(task);\n      };\n    });\n    activeTasks = activeTasks.filter(task => task.active);\n    this.setState({ activeTasks, doneTasks });\n  }\n\n  addTaskHandler = (text, date, important) => {\n    const task = {\n      id: this.counter++,\n      text,\n      date,\n      important,\n      active: true,\n      expiry: null\n    }\n\n    this.setState(prevState => {\n      return { activeTasks: [...prevState.activeTasks, task] };\n    });\n    return true;\n  }\n\n  showAllTasks = (e) => {\n    if (this.state.showAllTasks) {\n      e.target.textContent = 'Show all tasks';\n    } else {\n      e.target.textContent = 'Show last three tasks';\n    }\n\n    this.setState(prevState => {\n      return { showAllTasks: prevState.showAllTasks = !prevState.showAllTasks };\n    });\n  }\n\n  selectHandler = (value, name) => {\n    if (name === 'ToDo') {\n      let activeTasks = [...this.state.activeTasks];\n\n      switch (value) {\n        case 'fromA':\n          activeTasks.sort((a, b) => {\n            a = a.text.toLowerCase();\n            b = b.text.toLowerCase()\n\n            if (a < b) return -1;\n            if (a > b) return 1;\n            return 0\n          });\n          break;\n        case 'fromZ':\n          activeTasks.sort((a, b) => {\n            a = a.text.toLowerCase();\n            b = b.text.toLowerCase()\n\n            if (a > b) return -1;\n            if (a < b) return 1;\n            return 0\n          });\n          break;\n        case 'fromOldest':\n          activeTasks.sort((a, b) => {\n            if (a.expiry > b.expiry) return -1;\n            if (a.expiry < b.expiry) return 1;\n            return 0\n          });\n          break;\n        case 'fromLatest':\n          activeTasks.sort((a, b) => {\n            if (a.expiry < b.expiry) return -1;\n            if (a.expiry > b.expiry) return 1;\n            return 0\n          });\n          break;\n        case 'priority':\n          activeTasks.sort((a, b) => {\n            if (a.important && !b.important) return -1;\n            if (!a.important && b.important) return 1;\n            return 0;\n          })\n          break;\n\n        default: activeTasks = this.state.activeTasks;\n      }\n      this.setState(prevState => {\n        return { activeTasks: prevState.activeTasks = activeTasks };\n      });\n\n    } if (name === 'Done') {\n      let doneTasks = [...this.state.doneTasks];\n\n      switch (value) {\n        case 'fromA':\n          doneTasks.sort((a, b) => {\n            a = a.text.toLowerCase();\n            b = b.text.toLowerCase()\n\n            if (a < b) return -1;\n            if (a > b) return 1;\n            return 0\n          });\n          break;\n        case 'fromZ':\n          doneTasks.sort((a, b) => {\n            a = a.text.toLowerCase();\n            b = b.text.toLowerCase()\n\n            if (a > b) return -1;\n            if (a < b) return 1;\n            return 0\n          });\n          break;\n        case 'fromOldest':\n          doneTasks.sort((a, b) => {\n            if (a.expiry > b.expiry) return -1;\n            if (a.expiry < b.expiry) return 1;\n            return 0\n          });\n          break;\n        case 'fromLatest':\n          doneTasks.sort((a, b) => {\n            if (a.expiry < b.expiry) return -1;\n            if (a.expiry > b.expiry) return 1;\n            return 0\n          });\n          break;\n\n        default: doneTasks = this.state.doneTasks;\n      }\n\n      this.setState(prevState => {\n        return { doneTasks: prevState.tasks = doneTasks };\n      });\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AddTask addTask={this.addTaskHandler} />\n        <TaskList\n          activeTasks={this.state.activeTasks}\n          doneTasks={this.state.doneTasks}\n          displayTasks={this.state.showAllTasks}\n          delete={this.deleteTaskHandler}\n          change={this.changeTaskHandler}\n          showAllTasks={this.showAllTasks}\n          select={this.selectHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}