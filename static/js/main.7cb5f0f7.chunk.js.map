{"version":3,"sources":["components/AddTask/AddTask.js","components/Task/Task.js","components/TaskList/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","inputHandler","e","type","target","value","setState","prevState","addNewTaskHandler","_this$state","props","addTask","maxDate","this","react_default","a","createElement","className","placeholder","onChange","min","max","onClick","Component","Task","_props$task","task","id","active","important","expiry","style","color","backgroundColor","change","delete","expiryTime","toLocaleString","TaskList","activeTasks","tasks","filter","doneTasks","length","sort","b","toLowerCase","toDoTasks","map","components_Task_Task","key","done","showAllTasks","displayTasks","splice","App","counter","deleteTaskHandler","Object","toConsumableArray","changeTaskHandler","Array","from","forEach","getTime","addTaskHandler","concat","textContent","components_AddTask_AddTask","components_TaskList_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cb5f0f7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css';\r\n\r\nclass AddTask extends Component {\r\n\r\n    minDate = new Date().toISOString().slice(0, 10);\r\n\r\n    state = {\r\n        text: '',\r\n        checked: false,\r\n        date: this.minDate\r\n    }\r\n\r\n    inputHandler = (e) => {\r\n        const type = e.target.type;\r\n        const text = e.target.value;\r\n        const checked = e.target.checked;\r\n        const date = e.target.value;\r\n\r\n        if (type === 'date') {\r\n            this.setState(prevState => {\r\n                return { date: prevState.date = date };\r\n            });\r\n        } else if (type === 'text') {\r\n            this.setState(prevState => {\r\n                return { text: prevState.text = text };\r\n            });\r\n        } else if (type === 'checkbox') {\r\n            this.setState(prevState => {\r\n                return { checked: prevState.checked = checked };\r\n            });\r\n        }\r\n    }\r\n\r\n    addNewTaskHandler = () => {\r\n        const { text, date, checked } = this.state;\r\n\r\n        const add = this.props.addTask(text, date, checked);\r\n        if (add) {\r\n            this.setState(prevState => {\r\n                return {\r\n                    checked: prevState.checked = false,\r\n                    text: prevState.text = '',\r\n                    date: prevState.date = this.minDate\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const maxDate = +this.minDate.slice(0, 4) + 1 + '-12-31';\r\n\r\n        return (\r\n            <div className='AddTask'>\r\n                <div className='Form'>\r\n                    <input type='text' value={this.state.text} placeholder='Add your task' onChange={this.inputHandler} />\r\n                    <label>\r\n                        <input type='checkbox' checked={this.state.checked} onChange={this.inputHandler} />\r\n                        Priority\r\n                    </label>\r\n                    <label>Must be done until\r\n                        <input type='date' value={this.state.date} min={this.minDate} max={maxDate} onChange={this.inputHandler} />\r\n                    </label>\r\n                    <button onClick={this.addNewTaskHandler}>Add task</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\nimport './Task.css';\r\n\r\nconst Task = (props) => {\r\n\r\n    const { text, date, id, active, important, expiry } = props.task;\r\n    const style = {\r\n        color: '#fff',\r\n        backgroundColor: 'orange'\r\n    }\r\n\r\n    if (active) {\r\n        return (\r\n            <div className='ActiveTask'>\r\n                <div>\r\n                    <span style={important ? style : null}>{text}</span>\r\n                    <span>deadline: {date} </span>\r\n                </div>\r\n                <div className='ActiveTaskButtonsWrapper'>\r\n                    <button onClick={() => props.change(id)}>DONE</button>\r\n                    <button onClick={() => props.delete(id)}>DELETE</button>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        );\r\n    } else {\r\n\r\n        const expiryTime = new Date(expiry).toLocaleString()\r\n        return (\r\n            <div className='DoneTask'>\r\n                <div>\r\n                    <span>{text}</span>\r\n                    <span>inisial deadline: {date}</span>\r\n                    <em>Confirmed {expiryTime}</em>\r\n                </div>\r\n                <button onClick={() => props.delete(id)}>DELETE</button>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from '../Task/Task';\r\nimport './TaskList.css';\r\n\r\nconst TaskList = (props) => {\r\n\r\n    const activeTasks = props.tasks.filter(task => task.active);\r\n    const doneTasks = props.tasks.filter(task => !task.active);\r\n\r\n    if (activeTasks.length >= 2) {\r\n        activeTasks.sort((a, b) => {\r\n            a = a.text.toLowerCase();\r\n            b = b.text.toLowerCase()\r\n\r\n            if (a < b) return -1;\r\n            if (a > b) return 1;\r\n            return 0\r\n        })\r\n    }\r\n\r\n    if (doneTasks.length >= 2) {\r\n        doneTasks.sort((a, b) => {\r\n            if (a.expiry > b.expiry) return -1;\r\n            if (a.expiry < b.expiry) return 1;\r\n            return 0\r\n        })\r\n    }\r\n\r\n    const toDoTasks = activeTasks.map(task => (\r\n        <Task key={task.id}\r\n            task={task}\r\n            delete={props.delete}\r\n            change={props.change} />\r\n    ));\r\n\r\n    const done = doneTasks.map(task => (\r\n        <Task key={task.id}\r\n            task={task}\r\n            delete={props.delete}\r\n            change={props.change}\r\n            showAllTasks={props.showAllTasks} />\r\n    ))\r\n\r\n\r\n    return (\r\n        <div className='TaskList'>\r\n            <div className='ToDo'>\r\n                <h1>Things to be done</h1>\r\n                <h3>You have {activeTasks.length} things to do. </h3>\r\n                {activeTasks.length > 0 ? toDoTasks : <span>You've got nothing to do</span>}\r\n            </div>\r\n\r\n            <div className='Done'>\r\n                <h1>Tasks already done</h1>\r\n                <h3>You've managed to accomplish {doneTasks.length} tasks</h3>\r\n                {doneTasks.length > 3 && <div className='WarningWrapper'>\r\n                    <span className='Warning'>only last three tasks are being displayed</span>\r\n                    <button onClick={props.showAllTasks}>Show all tasks</button>\r\n                </div>}\r\n                {props.displayTasks ? done : done.splice(0, 3)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\nimport './App.css';\nimport AddTask from './components/AddTask/AddTask';\nimport TaskList from './components/TaskList/TaskList';\n\nclass App extends Component {\n\n  counter = 6;\n\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: 'odpocząć',\n        date: '2019-02-15',\n        important: false,\n        active: true,\n        expiry: null\n      },\n      {\n        id: 1,\n        text: 'a to i tamto',\n        date: '2019-05-15',\n        important: false,\n        active: true,\n        expiry: null\n      },\n      {\n        id: 2,\n        text: 'umyć auto',\n        date: '2019-04-15',\n        important: true,\n        active: true,\n        expiry: null\n      },\n      {\n        id: 3,\n        text: 'pojechać na wczasy',\n        date: '2019-12-15',\n        important: false,\n        active: true,\n        expiry: null\n      },\n      {\n        id: 4,\n        text: 'zagrać w wiedźmina4',\n        date: '2019-09-15',\n        important: false,\n        active: true,\n        expiry: null\n      },\n      {\n        id: 5,\n        text: 'sprzedać buteliki',\n        date: '2019-07-15',\n        important: false,\n        active: true,\n        expiry: null\n      },\n    ],\n    showAllTasks: false\n  }\n\n  deleteTaskHandler = (id) => {\n    // const tasks = [...this.state.tasks];\n    // const index = tasks.findIndex(task => task.id === id);\n    // tasks.splice(index, 1);\n    // this.setState(prevState => {\n    //   return { tasks: prevState.tasks = tasks };\n    // });\n\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id);\n    this.setState({ tasks })\n  }\n\n  changeTaskHandler = (id) => {\n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.expiry = new Date().getTime();\n      }\n    });\n    this.setState({ tasks });\n  }\n\n  addTaskHandler = (text, date, important) => {\n    const task = {\n      id: this.counter++,\n      text,\n      date,\n      important,\n      active: true,\n      expiry: null\n    }\n\n    // const tasks = [...this.state.tasks];\n    // tasks.push(task)\n    this.setState(prevState => {\n      return { tasks: [...prevState.tasks, task] };\n    });\n    return true;\n  }\n\n  showAllTasks = (e) => {\n\n    if (this.state.showAllTasks) {\n      e.target.textContent = 'Show all tasks';\n    } else {\n      e.target.textContent = 'Show last three tasks';\n    }\n\n    this.setState(prevState => {\n      return { showAllTasks: prevState.showAllTasks = !prevState.showAllTasks };\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AddTask addTask={this.addTaskHandler} />\n        <TaskList\n          tasks={this.state.tasks}\n          displayTasks={this.state.showAllTasks}\n          delete={this.deleteTaskHandler}\n          change={this.changeTaskHandler}\n          showAllTasks={this.showAllTasks}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}